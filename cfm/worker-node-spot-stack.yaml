---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS - Spot Node Group'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EKS Configuration"
        Parameters:
          - ClusterName
          - ClusterControlPlaneSecurityGroup
          - NodeInstanceProfileArn
          - ExistingNodeSecurityGroups
          - NodeImageId
          - VpcId
          - KeyName
          - NodeGroupName
          - Subnets
          - BootstrapArgumentsForOnDemand
          - BootstrapArgumentsForSpot
      - Label:
          default: "Auto Scaling Configuration"
        Parameters:
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredCapacity
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - ASGAutoAssignPublicIp
          - OnDemandBaseCapacity
          - OnDemandPercentageAboveBaseCapacity
          - InstanceTypesOverride
          - SpotAllocStrategy

Parameters:
  VpcId:
    Description: The VPC of the worker instances
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Select 3 subnets where workers can be created.
    Type: List<AWS::EC2::Subnet::Id>

  NodeInstanceProfileArn:
    Type: String
    Description: Node Instance profile Arn vaule

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  NodeImageId:
    Type: AWS::EC2::Image::Id
    Description: Find the latest AMI id here - https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html

  NodeInstanceType:
    Description: Default EC2 instance type for the node instances.
    Type: String
    Default: m5.large
    AllowedValues:
      - m5.large
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5d.large
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.12xlarge
      - m5d.24xlarge
      - m5a.large
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.12xlarge
      - m5a.24xlarge
      - m5ad.large
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.12xlarge
      - m5ad.24xlarge
      - m4.large
      - m4.2xlarge
      - m4.4xlarge
      - m4.12xlarge
      - m4.24xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Description: Desired size of Node Group ASG.

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 10

  ASGAutoAssignPublicIp:
    Type: String
    Description: "auto assign public IP address for ASG instances"
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"

  OnDemandBaseCapacity:
    Type: Number
    Description: "on-demand base capacity"
    Default: 1

  OnDemandPercentageAboveBaseCapacity:
    Type: Number
    Description: "on-demand percentage above base capacity(0-100)"

  InstanceTypesOverride:
    Type: String
    Description: "multiple spot instances to override(seperated by comma)"

  ExistingNodeSecurityGroups:
    Type: String
    Description: Use the existing Security Group for your nodegroup
    Default: ""

  ClusterName:
    Description: The cluster name provided when the cluster was created.  If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  BootstrapArgumentsForOnDemand:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: "--kubelet-extra-args --node-labels=lifecycle=OnDemand"
    Type: String

  BootstrapArgumentsForSpot:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: "--kubelet-extra-args '--node-labels=lifecycle=Ec2Spot --register-with-taints=spotInstance=true:PreferNoSchedule'
"
    Type: String

  ClusterControlPlaneSecurityGroup:
    Description: The security group of the cluster control plane.
    Type: AWS::EC2::SecurityGroup::Id

  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String

  SpotAllocStrategy:
    Type: String

Conditions:
  IsASGAutoAssignPublicIp: !Equals [ !Ref ASGAutoAssignPublicIp , "yes" ]

Resources:

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref NodeGroupName
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: !Ref OnDemandBaseCapacity
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentageAboveBaseCapacity
          SpotAllocationStrategy: !Ref SpotAllocStrategy
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref SpotLaunchTemplate
            Version: !GetAtt SpotLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Select [0, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [1, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [2, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [3, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [4, !Split [ ",", !Ref InstanceTypesOverride ] ]

      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier:
        !Ref Subnets
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-worker-node"
        PropagateAtLaunch: 'true'
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: 'owned'
        PropagateAtLaunch: 'true'
      - Key: k8s.io/cluster-autoscaler/enabled
        Value: 'true'
        PropagateAtLaunch: true
      - Key: !Sub k8s.io/cluster-autoscaler/${ClusterName}
        Value: 'true'
        PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        MaxBatchSize: '1'
        PauseTime: 'PT2M'

  LCH:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref NodeGroup
      HeartbeatTimeout: 300
      DefaultResult: CONTINUE
      LifecycleHookName: !Sub "${NodeGroupName}-lifecycle-hook"
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

#
# Launch Template
#
  SpotLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "launch-template-${AWS::StackName}"
      LaunchTemplateData:
        InstanceType: !Select [0, !Split [ ",", !Ref InstanceTypesOverride ] ]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${NodeGroupName}-ASG-Node"
              - Key: KubernetesCluster
                Value: !Ref ClusterName
              - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
                Value: 'owned'
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            set -o xtrace
            yum install -y iptables-services
            iptables --insert FORWARD 1 --in-interface eni+ --destination 169.254.169.254/32 --jump DROP
            iptables-save | tee /etc/sysconfig/iptables
            systemctl enable --now iptables
            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            export AWS_DEFAULT_REGION=${AWS::Region}
            ilc=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[0].Instances[0].InstanceLifecycle' --output text)
            if [ "$ilc" == "spot" ]; then
              /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArgumentsForSpot}
            else
              /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArgumentsForOnDemand}
            fi
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}
        IamInstanceProfile:
          Arn: !Ref NodeInstanceProfileArn
        KeyName: !Ref KeyName
        NetworkInterfaces:
          -
            DeviceIndex: 0
            AssociatePublicIpAddress:
              !If
                - IsASGAutoAssignPublicIp
                - 'true'
                - 'false'
            SubnetId: !Select [0, !Ref Subnets]
            Groups:
              !Split [ ",", !Ref ExistingNodeSecurityGroups ]
        ImageId: !Ref NodeImageId
        InstanceType: !Ref NodeInstanceType

Outputs:
  WorkerAutoScalingGroupName:
    Description: The name of auto scaling group containing worker nodes.
    Value: !Ref NodeGroup
